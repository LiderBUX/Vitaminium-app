document.addEventListener('DOMContentLoaded', () => {
  const metricsForm = document.getElementById('metrics-form');
  if (metricsForm) {
    const metricsList = document.getElementById('metricsList');
    let metricsData = JSON.parse(localStorage.getItem("metricsData")) || [];
    
    function saveMetricsData() {
      localStorage.setItem("metricsData", JSON.stringify(metricsData));
    }
    
    function renderMetrics() {
      metricsList.innerHTML = "";
      metricsData.forEach((record, index) => {
        const recordDiv = document.createElement("div");
        recordDiv.classList.add("metric-record");
        
        let recordHTML = `<strong>${record.date} ${record.time}</strong><br>`;
        if (record.bloodPressure !== "") {
          recordHTML += `–ê–î: ${record.bloodPressure}<br>`;
        }
        if (record.sugarLevel !== "") {
          recordHTML += `–°–∞—Ö–∞—Ä: ${record.sugarLevel}<br>`;
        }
        if (record.temperature !== "") {
          recordHTML += `–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${record.temperature}<br>`;
        }
        recordDiv.innerHTML = recordHTML;
        
        const deleteBtn = document.createElement("button");
        deleteBtn.textContent = "–£–¥–∞–ª–∏—Ç—å";
        deleteBtn.classList.add("compact-button");
        deleteBtn.addEventListener('click', () => {
          if (confirm("–£–¥–∞–ª–∏—Ç—å —ç—Ç–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏?")) {
            metricsData.splice(index, 1);
            saveMetricsData();
            renderMetrics();
          }
        });
        recordDiv.appendChild(deleteBtn);
        metricsList.appendChild(recordDiv);
      });
    }
    
    metricsForm.addEventListener("submit", (event) => {
      event.preventDefault();
      const date = document.getElementById("metrics-date").value;
      const time = document.getElementById("metrics-time").value;
      const bloodPressure = document.getElementById("blood-pressure").value;
      let sugarLevel = document.getElementById("sugar-level").value;
      const temperature = document.getElementById("temperature").value;
      
      // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ —Å–∞—Ö–∞—Ä–∞, —á—Ç–æ–±—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞
      sugarLevel = sugarLevel.replace(/,/g, '.');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –¥–∞—Ç–∞, –≤—Ä–µ–º—è –∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å
      if (date === "" || time === "" || (bloodPressure === "" && sugarLevel === "" && temperature === "")) {
        alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å: –ê–î, —É—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞ –∏–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É");
        return;
      }
      
      const newRecord = {
        date: date,
        time: time,
        bloodPressure: bloodPressure || "",
        sugarLevel: sugarLevel || "",
        temperature: temperature || ""
      };
      
      metricsData.push(newRecord);
      saveMetricsData();
      renderMetrics();
      metricsForm.reset();
    });
    
    renderMetrics();
  }
});

document.getElementById("exportData").addEventListener("click", function () {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
    let measurements = JSON.parse(localStorage.getItem("measurements")) || [];

    if (measurements.length === 0) {
        alert("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏!");
        return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
    let textData = "–î–Ω–µ–≤–Ω–∏–∫ –∏–∑–º–µ—Ä–µ–Ω–∏–π:\n\n";
    measurements.forEach((entry, index) => {
        textData += `–ó–∞–ø–∏—Å—å ${index + 1}:\n`;
        textData += `üìÖ –î–∞—Ç–∞: ${entry.date}\n`;
        textData += `üïí –í—Ä–µ–º—è: ${entry.time}\n`;
        textData += `ü©∏ –î–∞–≤–ª–µ–Ω–∏–µ: ${entry.bp_systolic}/${entry.bp_diastolic} –º–º —Ä—Ç. —Å—Ç.\n`;
        textData += `üç¨ –£—Ä–æ–≤–µ–Ω—å —Å–∞—Ö–∞—Ä–∞: ${entry.sugar} –º–º–æ–ª—å/–ª\n`;
        textData += `üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${entry.temperature} ¬∞C\n`;
        textData += `------------------------\n`;
    });

    // –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª
    let blob = new Blob([textData], { type: "text/plain" });
    let link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = "health_diary.txt"; // –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    link.click();
});

